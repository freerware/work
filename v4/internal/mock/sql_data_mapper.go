// Code generated by MockGen. DO NOT EDIT.
// Source: v2/sql_data_mapper.go

// Package mock is a generated GoMock package.
package mock

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// SQLDataMapper is a mock of SQLDataMapper interface
type SQLDataMapper struct {
	ctrl     *gomock.Controller
	recorder *SQLDataMapperMockRecorder
}

// SQLDataMapperMockRecorder is the mock recorder for SQLDataMapper
type SQLDataMapperMockRecorder struct {
	mock *SQLDataMapper
}

// NewSQLDataMapper creates a new mock instance
func NewSQLDataMapper(ctrl *gomock.Controller) *SQLDataMapper {
	mock := &SQLDataMapper{ctrl: ctrl}
	mock.recorder = &SQLDataMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *SQLDataMapper) EXPECT() *SQLDataMapperMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *SQLDataMapper) Insert(arg0 *sql.Tx, arg1 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *SQLDataMapperMockRecorder) Insert(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*SQLDataMapper)(nil).Insert), varargs...)
}

// Update mocks base method
func (m *SQLDataMapper) Update(arg0 *sql.Tx, arg1 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *SQLDataMapperMockRecorder) Update(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*SQLDataMapper)(nil).Update), varargs...)
}

// Delete mocks base method
func (m *SQLDataMapper) Delete(arg0 *sql.Tx, arg1 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *SQLDataMapperMockRecorder) Delete(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*SQLDataMapper)(nil).Delete), varargs...)
}
