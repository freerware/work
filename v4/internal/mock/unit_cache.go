// Code generated by MockGen. DO NOT EDIT.
// Source: v4/unit_cache.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// UnitCacheClient is a mock of UnitCacheClient interface.
type UnitCacheClient struct {
	ctrl     *gomock.Controller
	recorder *UnitCacheClientMockRecorder
}

// UnitCacheClientMockRecorder is the mock recorder for UnitCacheClient.
type UnitCacheClientMockRecorder struct {
	mock *UnitCacheClient
}

// NewUnitCacheClient creates a new mock instance.
func NewUnitCacheClient(ctrl *gomock.Controller) *UnitCacheClient {
	mock := &UnitCacheClient{ctrl: ctrl}
	mock.recorder = &UnitCacheClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *UnitCacheClient) EXPECT() *UnitCacheClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *UnitCacheClient) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *UnitCacheClientMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*UnitCacheClient)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *UnitCacheClient) Get(arg0 context.Context, arg1 string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *UnitCacheClientMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*UnitCacheClient)(nil).Get), arg0, arg1)
}

// Set mocks base method.
func (m *UnitCacheClient) Set(arg0 context.Context, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *UnitCacheClientMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*UnitCacheClient)(nil).Set), arg0, arg1, arg2)
}
